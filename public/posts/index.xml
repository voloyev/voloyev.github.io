<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Notes</title>
    <link>https://voloyev.github.io/posts/</link>
    <description>Recent content in Posts on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Apr 2020 22:58:00 +0200</lastBuildDate><atom:link href="https://voloyev.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dance with puma and systemd</title>
      <link>https://voloyev.github.io/posts/2020-04-06-dance_with_puma_and_systemd/</link>
      <pubDate>Mon, 06 Apr 2020 22:58:00 +0200</pubDate>
      
      <guid>https://voloyev.github.io/posts/2020-04-06-dance_with_puma_and_systemd/</guid>
      <description>So I&amp;rsquo;ve tried to start my puma instance with systemd in user space.
My puma.service in jinja2 template. I use ansible to provision my server.
[Unit] Description=Puma HTTP Server After=network.target [Service] Type=simple RemainAfterExit=true WorkingDirectory={{ path_to_prod }}current Environment=RAILS_ENV=production ExecStart=/usr/local/bin/chruby-exec ruby-2.6.5 -- bundle exec puma -C {{ path_to_prod }}current/config/puma.rb -b unix://{{ path_to_prod }}shared/tmp/sockets/puma.sock ExecReload=/bin/kill -TSTP $MAINPID SyslogIdentifier=api-puma Restart=always StandardOutput={{ path_to_prod }}current/log/puma-prod.log StandardError={{ path_to_prod }}current/log/puma-prod_err.log [Install] WantedBy=multi-user.target It works, but when I logout from server it stops.</description>
    </item>
    
    <item>
      <title>Tap and then methods in ruby</title>
      <link>https://voloyev.github.io/posts/2020-10-25-ruby-then-and-tap-methods/</link>
      <pubDate>Fri, 25 Oct 2019 20:32:00 +0200</pubDate>
      
      <guid>https://voloyev.github.io/posts/2020-10-25-ruby-then-and-tap-methods/</guid>
      <description>In nutshell #then return result of a block and #tap returns self
class Person def initialize(name:, email:) @name = name @email = email end attr_accessor :name, :email end Person.new(name: &amp;#34;Bob&amp;#34;, email: &amp;#34;bob@example.com&amp;#34;) .then {|person| EmailTemplate.for(person.name, person.email)} .then {|template| Email.notify(template)} bob_for_tap = Person.new( name: &amp;#34;Bob for Tap&amp;#34;, email: &amp;#34;bob_for_tap@example.com&amp;#34; ) .tap {|persone| Verificator(person)} # so at the end of block we return instance of Person </description>
    </item>
    
    <item>
      <title>Notes about stdout &amp;&amp; stdin</title>
      <link>https://voloyev.github.io/posts/2018-10-13-work-with-files/</link>
      <pubDate>Sat, 13 Oct 2018 14:00:00 +0200</pubDate>
      
      <guid>https://voloyev.github.io/posts/2018-10-13-work-with-files/</guid>
      <description>Work with strems Command Description cmd &amp;gt; file execute program cmd and send it output tp file, if file exists - rewrite it or creates it cmd &amp;gt;&amp;gt; file append data from cmd to file cmd2 &amp;lt; file execute cmd2 with data from file cmd3 &amp;gt; file1 &amp;lt; file2 execute cmd3 change output and input `cmd cmd1` cmd 2&amp;gt; errfile send stream of errors to errfile `cmd 2&amp;gt;&amp;amp;1 cmd6` -rwxr-xr-x 1 root root 14322 date /bin/cat</description>
    </item>
    
    <item>
      <title>Build ruby 2.3.3 in 2018</title>
      <link>https://voloyev.github.io/posts/2018-06-02-build-ruby-2.3.3-in-2018/</link>
      <pubDate>Sat, 02 Jun 2018 21:12:00 +0200</pubDate>
      
      <guid>https://voloyev.github.io/posts/2018-06-02-build-ruby-2.3.3-in-2018/</guid>
      <description>I have builded ruby 2.3.3 with ruby-build.
You have to install openssl-1.0
In arch you can it like this:
$ sudo pacman -S openssl-1.0 # it will be here usr/lib/openssl-1.0/
than
$ PKG_CONFIG_PATH=/usr/lib/openssl-1.0/pkgconfig/:/usr/lib/pkgconfig/ RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/lib/openssl-1.0/ rbenv install 2.3.3</description>
    </item>
    
    <item>
      <title>Ruby benchmarks</title>
      <link>https://voloyev.github.io/posts/2018-05-07-some-ruby-benchmarks/</link>
      <pubDate>Mon, 07 May 2018 14:13:00 +0200</pubDate>
      
      <guid>https://voloyev.github.io/posts/2018-05-07-some-ruby-benchmarks/</guid>
      <description>Loops and recursion: require &amp;#39;benchmark/ips&amp;#39; RubyVM::InstructionSequence.compile_option = { tailcall_optimization: true, trace_instruction: false } def rec_fact(n) return 1 if n &amp;lt;= 1 n * rec_fact(n-1) end def tail_fact(n, acc=1) return acc if n &amp;lt;= 1 tail_fact(n-1, n*acc) end def each_fact(n) total = 1 (1..n).each do |n| total *= n end total end def inject_fact(n) (1..n).inject(1, :*) end def forin_fact(n) raise InvalidArgument, &amp;#34;negative input given&amp;#34; if n &amp;lt; 0 result = 1 for i in (1.</description>
    </item>
    
    <item>
      <title>Go routines</title>
      <link>https://voloyev.github.io/posts/2018-04-30-go-routines/</link>
      <pubDate>Mon, 30 Apr 2018 13:16:00 +0200</pubDate>
      
      <guid>https://voloyev.github.io/posts/2018-04-30-go-routines/</guid>
      <description>Lets look at folowing code
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { links := []string{ &amp;#34;http://google.co&amp;#34;, &amp;#34;http://facebook.com&amp;#34;, &amp;#34;http://golang.org&amp;#34;, &amp;#34;http://cafephilo.lviv.ua&amp;#34;, &amp;#34;http://http://10.6.193.162:3000/&amp;#34;, &amp;#34;http://10.25.12.143:3000/&amp;#34;, } for _, el := range links { checkLink(el) } } func checkLink(link string) { _, err := http.Get(link) if err != nil { fmt.Println(link, &amp;#34;it might be down&amp;#34;) return } fmt.Println(link, &amp;#34;is up&amp;#34;) } And think how we are going to make it more async.</description>
    </item>
    
    <item>
      <title>Go interfaces</title>
      <link>https://voloyev.github.io/posts/2018-04-18-go-interfaces/</link>
      <pubDate>Wed, 18 Apr 2018 13:33:00 +0200</pubDate>
      
      <guid>https://voloyev.github.io/posts/2018-04-18-go-interfaces/</guid>
      <description>import ( &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; ) type animal interface { greet() string } type cat struct {name string} type dog struct {name string} func main() { bob := cat{name: &amp;#34;Bob&amp;#34;} doge := dog{name: &amp;#34;Doge&amp;#34;} fmt.Println(bob.greet()) fmt.Println(doge.greet()) } func (c cat) greet() string { s := []string{c.name, &amp;#34;meow&amp;#34;} return strings.Join(s, &amp;#34;,&amp;#34;) } func (d dog) greet() string { voice := make([]string, 3) for i,_ := range(voice) { voice[i] = d.name } return strings.</description>
    </item>
    
    <item>
      <title>Go notes</title>
      <link>https://voloyev.github.io/posts/2018-04-18-go/</link>
      <pubDate>Wed, 18 Apr 2018 11:22:00 +0200</pubDate>
      
      <guid>https://voloyev.github.io/posts/2018-04-18-go/</guid>
      <description>Pointers In go everything pass by value. That means when you pass value as argument to function go copies the value.
Example:
type person struct{ name string age int } bob := person{name: &amp;#34;Bob&amp;#34;, age: 22,} func(p person) changeName(newName string){ p.name = newName } bob.changeName(&amp;#34;Alice&amp;#34;) // we expect that function will change name from Bob to Alice // But no fmt.Println(bob.name) // return bob to fix this we need to change argument</description>
    </item>
    
    <item>
      <title>Pacman</title>
      <link>https://voloyev.github.io/posts/2017-05-13-pacman/</link>
      <pubDate>Sat, 13 May 2017 23:22:00 +0200</pubDate>
      
      <guid>https://voloyev.github.io/posts/2017-05-13-pacman/</guid>
      <description>Довідка про команди: $ pacman --help $ pacman -S --help
Встановити пакети: $ pacman -S gimp gpicview
Пошук по регулярці: $ pacman -Ss ^ssh
Встановити групу пакетів: $ pacman -S --needed base-devel
Список пакетів, що в групі: $ pacman -Sg base-devel
Список усіх доступних груп: групи і пакети у них $ pacman -Sgg
Тільки імена груп $ pacman -Sgg | cut -d &#39; &#39; -f 1 | uniq
Оновити базу даних пакетів: $ pacman -Sy</description>
    </item>
    
    <item>
      <title>Equgilibrium index</title>
      <link>https://voloyev.github.io/posts/2017-05-10-equilibrium-index/</link>
      <pubDate>Wed, 10 May 2017 23:22:00 +0200</pubDate>
      
      <guid>https://voloyev.github.io/posts/2017-05-10-equilibrium-index/</guid>
      <description>def equilib(list) left, right = 0, list.reduce(:+) equilib_list = [] list.each_with_index do |val, i| right -= val # puts i.to_s + &amp;#39; :&amp;#39; +val.to_s if right == left equilib_list &amp;lt;&amp;lt; i if left == right left += val end return -1 if equilib_list.empty? equilib_list[0] end p equilib([-1, 3, -4, 5, 1, -6, 2, 1]) ruby whith while def eq(arr) right = arr.reduce(:+) # sum of all elements in array left = 0 i = 0 while i &amp;lt; arr.</description>
    </item>
    
    <item>
      <title>About variables in ruby</title>
      <link>https://voloyev.github.io/posts/2017-02-11-ruby-variables/</link>
      <pubDate>Sat, 11 Feb 2017 13:11:00 +0200</pubDate>
      
      <guid>https://voloyev.github.io/posts/2017-02-11-ruby-variables/</guid>
      <description># Local v = &amp;#34;Ruby&amp;#34; # =&amp;gt; &amp;#34;Ruby&amp;#34; v.class # =&amp;gt; String v.kind_of? String # =&amp;gt; true defined? v # =&amp;gt; &amp;#34;local-variable&amp;#34; # Instance @i = &amp;#34;Ruby&amp;#34; # =&amp;gt; &amp;#34;Ruby&amp;#34; defined? @i # =&amp;gt; &amp;#34;instance-variable&amp;#34; # Global $g = &amp;#34;Ruby&amp;#34; # =&amp;gt; &amp;#34;Ruby&amp;#34; defined? $g # =&amp;gt; &amp;#34;global-variable&amp;#34; # Constant C = &amp;#34;Ruby&amp;#34; # =&amp;gt; &amp;#34;Ruby&amp;#34; defined? C # =&amp;gt; &amp;#34;constant&amp;#34; </description>
    </item>
    
  </channel>
</rss>
